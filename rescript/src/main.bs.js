// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vec3 = require("./Vec3.bs.js");
var Caml_int32 = require("rescript/lib/js/caml_int32.js");

function writeFileHeader(width, height) {
  console.log("P3");
  console.log(String(width) + " " + String(height));
  console.log("255");
}

function rayColor(r) {
  var unitDirection = Vec3.unitVector(r.direction);
  var t = Vec3.getY(unitDirection) + 1.0 * 0.5;
  return Vec3.addVec3(Vec3.multiplyFloat([
                  1.0,
                  1.0,
                  1.0
                ], 1.0 - t), Vec3.multiplyFloat([
                  0.5,
                  0.7,
                  1.0
                ], t));
}

function main(param) {
  var aspectRatio = 16.0 / 9.0;
  var imageHeight = 400 / aspectRatio | 0;
  var viewportWidth = aspectRatio * 2.0;
  var origin = [
    0.0,
    0.0,
    0.0
  ];
  var horizontal = [
    viewportWidth,
    0.0,
    0.0
  ];
  var vertical = [
    0.0,
    2.0,
    0.0
  ];
  var halfHorizontal = Vec3.divideFloat(horizontal, 2.0);
  var halfVertical = Vec3.divideFloat(vertical, 2.0);
  var focalVector = [
    0.0,
    0.0,
    1.0
  ];
  var lowerLeftCorner = Vec3.subtractVec3(Vec3.subtractVec3(Vec3.subtractVec3(origin, halfHorizontal), halfVertical), focalVector);
  writeFileHeader(400, imageHeight);
  for(var j = imageHeight - 1 | 0; j >= 0; --j){
    console.error("Scanlines remaining: " + String(j));
    for(var i = 0; i <= 399; ++i){
      var u = i / 399 | 0;
      var v = Caml_int32.div(j, imageHeight - 1 | 0);
      var ray_direction = Vec3.subtractVec3(Vec3.addVec3(Vec3.addVec3(lowerLeftCorner, Vec3.multiplyFloat(horizontal, u)), Vec3.multiplyFloat(vertical, v)), origin);
      var ray = {
        origin: origin,
        direction: ray_direction
      };
      Vec3.writeColor(rayColor(ray));
    }
  }
  console.error("Done.");
}

main(undefined);

exports.writeFileHeader = writeFileHeader;
exports.rayColor = rayColor;
exports.main = main;
/*  Not a pure module */

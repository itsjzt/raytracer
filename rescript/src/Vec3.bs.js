// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function getX(vec) {
  return vec[0];
}

function getY(vec) {
  return vec[1];
}

function getZ(vec) {
  return vec[2];
}

function addFloat(firstVec3, n) {
  return [
          firstVec3[0] + n,
          firstVec3[1] + n,
          firstVec3[2] + n
        ];
}

function subtractFloat(firstVec3, n) {
  return addFloat(firstVec3, -1.0 * n);
}

function multiplyFloat(firstVec3, n) {
  return [
          firstVec3[0] * n,
          firstVec3[1] * n,
          firstVec3[2] * n
        ];
}

function divideFloat(firstVec3, n) {
  return multiplyFloat(firstVec3, 1.0 / n);
}

function length(firstVec3) {
  var z = firstVec3[2];
  var y = firstVec3[1];
  var x = firstVec3[0];
  return Math.sqrt(x * x + y * y + z * z);
}

function addVec3(firstVec3, secondVec3) {
  return [
          firstVec3[0] + secondVec3[0],
          firstVec3[1] + secondVec3[1],
          firstVec3[2] + secondVec3[2]
        ];
}

function subtractVec3(firstVec3, secondVec3) {
  return addVec3(firstVec3, multiplyFloat(secondVec3, -1.0));
}

function turnNegative(vec) {
  return multiplyFloat(vec, -1.0);
}

function dotProduct(firstVec3, secondVec3) {
  return firstVec3[0] * secondVec3[0] + firstVec3[1] * secondVec3[1] + firstVec3[2] * secondVec3[2];
}

function crossProduct(firstVec3, secondVec3) {
  var z2 = secondVec3[2];
  var y2 = secondVec3[1];
  var x2 = secondVec3[0];
  var z = firstVec3[2];
  var y = firstVec3[1];
  var x = firstVec3[0];
  return [
          Math.imul(y, z2) - Math.imul(z, y2) | 0,
          Math.imul(z, x2) - Math.imul(x, z2) | 0,
          Math.imul(x, y2) - Math.imul(y, x2) | 0
        ];
}

function unitVector(vec) {
  return divideFloat(vec, length(vec));
}

function writeColor(color) {
  var ix = String(255.999 * color[0] | 0);
  var iy = String(255.999 * color[1] | 0);
  var iz = String(255.999 * color[2] | 0);
  console.log(ix + " " + iy + " " + iz);
}

exports.getX = getX;
exports.getY = getY;
exports.getZ = getZ;
exports.addFloat = addFloat;
exports.subtractFloat = subtractFloat;
exports.multiplyFloat = multiplyFloat;
exports.divideFloat = divideFloat;
exports.length = length;
exports.addVec3 = addVec3;
exports.subtractVec3 = subtractVec3;
exports.turnNegative = turnNegative;
exports.dotProduct = dotProduct;
exports.crossProduct = crossProduct;
exports.unitVector = unitVector;
exports.writeColor = writeColor;
/* No side effect */
